#LyX 2.1 created this file. For more info see http://www.lyx.org/
\lyxformat 474
\begin_document
\begin_header
\textclass article
\use_default_options true
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_math auto
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing onehalf
\use_hyperref false
\papersize letterpaper
\use_geometry false
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation skip
\defskip smallskip
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Standard
\noindent
\align center

\series bold
\size larger
\color black
Área Académica de Ingeniería en Computadores 
\end_layout

\begin_layout Standard
\noindent
\align center

\series bold
\size larger
\color black
Programa de Licenciatura en Ingeniería en Computadores 
\end_layout

\begin_layout Standard
\noindent
\align center

\series bold
\size larger
\color black
Curso: CE-4303 - Principios de Sistemas Operativos 
\end_layout

\begin_layout Standard
\noindent
\align center
\begin_inset VSpace defskip
\end_inset


\end_layout

\begin_layout Standard
\noindent
\align center
\begin_inset Graphics
	filename Imagenes/logoTEC.JPG
	scale 50
	rotateOrigin center

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace defskip
\end_inset


\end_layout

\begin_layout Standard
\noindent
\align center

\series bold
\size larger
\color black
Evaluación: Tarea Corta 1 
\end_layout

\begin_layout Standard
\noindent
\align center

\series bold
\size larger
\color black
\begin_inset VSpace defskip
\end_inset


\end_layout

\begin_layout Standard
\noindent
\align center

\series bold
\size larger
\color black
Realizado por: 
\end_layout

\begin_layout Standard
\noindent
\align center
Daniel Canessa Valverde, 201137483
\end_layout

\begin_layout Standard
\noindent
\align center
Felipe Mejias, 
\end_layout

\begin_layout Standard
\noindent
\align center
Edward Umaña Williams, 201128403
\end_layout

\begin_layout Standard
\noindent
\align center
\begin_inset VSpace defskip
\end_inset


\end_layout

\begin_layout Standard
\noindent
\align center

\series bold
\size larger
\color black
Profesora: 
\end_layout

\begin_layout Standard
\noindent
\align center
Jennifer Vargas 
\end_layout

\begin_layout Standard
\noindent
\align center

\series bold
\size larger
\color black
Fecha: 16 de agosto de 2016
\end_layout

\begin_layout Standard

\series bold
\size larger
\color black
1 Introducción
\end_layout

\begin_layout Standard

\series bold
\size large
\color black
1.1 Demonios en Linux
\end_layout

\begin_layout Standard
Un demonio es un tipo de programa de Unix que se ejecuta de manera constante
 sin que el usuario se de cuenta.
 Muchos de estos demonios se ejecutan constantemente esperando algún evento
 significativo.
 Otros demonios se ejecutan de manera periódica y concluyen al ejecutar
 su tarea.
 Por ejemplos el uucp, utilidad de transferencia de archivos.
 [1]
\end_layout

\begin_layout Standard
Los demonios son normalmente inicializados como un proceso.
 Un proceso es una instancia existente de un programa, la cual es administrada
 por el kernel a la que se le asigna un identificador de proceso.
 Existen tres tipos de procesos en linux: interactivos, batch y demonios.
 [2]
\end_layout

\begin_layout Standard
Los interactivos se ejecutan a nivel de usuario mediante línea de comandos
 y los bash se agregan a una cola de comandos que no está asociada a la
 línea de comandos utilizada.
 Por su parte los demonios son reconocidos por el sistema como un proceso
 normal, aunque no esté en contacto con el usuario y normalmente se inician
 con el boot del sistema
\end_layout

\begin_layout Standard
Los demonios son muy sencillos de programar en el ambiente the UNIX.
 Pueden ser escritos por cualquier usuario y lanzado periódicamente mediante
 la línea de comandos, o System V.
 
\end_layout

\begin_layout Standard
Para crear un demonio se deben seguir lo siguientes pasos: [3]
\end_layout

\begin_layout Enumerate
fork() para que el proceso padre pueda salir, así la devuelve control a
 la línea de comandos que llamó al programa.
\end_layout

\begin_layout Enumerate
setsid() para hacerse una sesión y una sesión de grupo lider de manera tal
 que el proceso no tenga una terminal controlada.
\end_layout

\begin_layout Enumerate
fork() de nuevo para que el padre (la sesión del grupo líder) pueda salirse.
 Esto significa que estamos en una sesión sin grupo leader, por lo que no
 puede controlar de nuevo una terminal.
 
\end_layout

\begin_layout Enumerate
chdir(“/”) para asegurarse que nuestro proceso no retenga ningún directorio
 en uso.
 
\end_layout

\begin_layout Enumerate
unmask(0) para tener completo control the permisos sobre cualquier archivo
 que escriba.
 close() fds 0, 1 and 2.
 Libera los estandar de entrada , salida y error heredados del proceso padre.
 
\end_layout

\begin_layout Enumerate
Establecer un archivo para registrar los eventos y errores del demonio 
\end_layout

\begin_layout Standard
Los sistemas de Unix ejecutan una gran cantidad de demonios, principalmente
 para responder a peticiones de servicios de computadores en la red, además
 de responder a otros programas y actividades del hardware.
 No es necesario que el responsable de ejecutar la acción del demonio este
 conciente que el demonio está escuchando aunque algunos programas frecuentement
e ejecutan acciones porque saben que un demonio está atento a esas señales.
 [2]
\end_layout

\begin_layout Standard
Dentro de los demonios más importante de Linux , y por lo tanto las funciones
 más importantes de los mismo podemos encontrar init, el programa encargado
 de lanzar todos los otros procesos, crond , el calendarizador de tareas
 basado en tiempo o por ejemplo httpd que es un servidor web entre otros
 como ntpd,sshd, syncd entre otras.
 [4]
\end_layout

\begin_layout Standard

\series bold
\size large
\color black
1.2 SystemD y SysV
\end_layout

\begin_layout Standard

\series bold
\size large
\color black
1.3 Especificación del programa
\end_layout

\begin_layout Standard

\series bold
\size larger
\color black
2 Ambiente de desarrollo
\end_layout

\begin_layout Itemize
El software se desarrolló en el lenguaje de programación C, utilizando el
 ambiente de desarrollo Geany versión 1.28.
 
\end_layout

\begin_layout Itemize
El sistema operativo que se utilizó fue Linux y su distribucción Ubuntu
 15.04.
 
\end_layout

\begin_layout Itemize
Para compilar el código se utiliza el compilador GCC, con la versión 6.1.
\end_layout

\begin_layout Standard

\series bold
\size larger
\color black
3 Estructuras de datos, funciones y librerias
\end_layout

\begin_layout Standard
El desarrollo de la aplicación se dividió en 2 partes, el desarrollo del
 demonio de monitoreo y la implementación del servicio.
 El demonio cuenta con 2 archivos de código en C, que se incluyen en un
 tercer archivo de código C que es el encargado de unirlos.
 Es así como el demonio cuenta con un código dedicado a la lectura del archivo
 config.conf (readFile), otro código dedicado al monitoreo (monitor) y otro
 código que genera al demonio y une los dos códigos anteriores (TrackerMon).
\end_layout

\begin_layout Standard
El archivo de código principal, TrackerMon, está compuesto de 2 funciones
 skeleton_daemon y main, a continuación se explican con más detalle.
\end_layout

\begin_layout Itemize
main: es la función principal de este código, cuando el código se ejecuta
 está función es la primera en ejecutarse.
 Esta función inicialmente hace una llamada a la función skeleton_daemon,
 lo que demoniza el código, luego de esto se inicia un ciclo infinito que
 tiene un delay de 10 segundos al finalizar cada iteración.
 El while primero obtiene los datos del archivo config.conf utilizando el
 código de readFile que se explica más adelante, readFile provee estos datos
 por medio de una estructura.
 Luego se procede a llamar a las funciones del monitor suministrandoles
 los datos obtenidos de ReadFile, específicamente isMemoryRangeAccepted,
 isCPURangeAccepted e isSystemFileRangeAccepted.
\end_layout

\begin_layout Itemize

\color red
skeleton_daemon: Edward escriba aquí
\end_layout

\begin_layout Standard
El código del archivo monitor.c es el encargado de realizar las verificaciones
 de los recursos del sistema que fueron especificados en el archivo config.conf
 , en caso de que se exceda el 
\begin_inset Quotes eld
\end_inset

threshold
\begin_inset Quotes erd
\end_inset

 de un recurso especificado en el archivo de configuración, el monitor escribe
 en Trackermon.log un reporte de la situación, este archivo por defecto se
 encuentra en /var/log/Trackermon.log, sin embargo esta ruta puede cambiar
 en el archivo de configuración.
 Las funciones del monitor se especifican a continuación.
\end_layout

\begin_layout Itemize
isMemoryRangeAccepted: esta función calcula la cantidad de memoria Ram que
 está en uso, en caso de superar el valor del 
\begin_inset Quotes eld
\end_inset

threshold
\begin_inset Quotes erd
\end_inset

 escribe en el archivo Trackermon.log un reporte.
\end_layout

\begin_layout Itemize
isCPURangeAccepted: esta función calcula la cantidad de uso del CPU actualmente,
 en caso de superar el valor del “threshold” escribe en el archivo Trackermon.log
 un reporte.
\end_layout

\begin_layout Itemize
isSystemFileRangeAccepted: esta función revisa el almacenamiento de cada
 system file especificado en el archivo config.conf, en caso de superar el
 valor del “threshold” de algún system file escribe en el archivo Trackermon.log
 un reporte.
\end_layout

\begin_layout Standard
El monitor utiliza varias bibliotecas, estas se especifican a continuación:
\end_layout

\begin_layout Itemize
Unistd.h: es la biblioteca encargada de dar acceso al API de POXI.
 De los cuales se utilizan métodos como fork() para crear procesos hijos
 en la creación del demonio.
 
\end_layout

\begin_layout Itemize
Signal.h: esta biblioteca permite el manejo de señales que se reportan durante
 la ejecución del programa, de igual manera esta es importante para la generació
n del demonio y es utilizada en las siguientes líneas de código como signal(SIGC
HLD, SIG_IGN) donde se le indica al proceso que ignore la señal enviada
 por su padre cuando este termine el proceso y signal(SIGHUP, SIG_IGN) que
 le indica al proceso que ignore la señal de que la terminal donde fue ejecutado
 ha sido cerrada.
 
\end_layout

\begin_layout Itemize
sys/types.h y sys/stat: la librería sys/stat permite obtener información
 sobre ficheros y en sys/types están definidos algunos tipos de datos utilizados
 por la biblioteca anterior.
 Estos son importantes para leer archivos y obtener datos del monitoreo
 del CPU y memoria.
\end_layout

\begin_layout Itemize
syslog.h: es la biblioteca utilizada para el registro de mensajes.
 Utilizados en el proyecto para debug los mensajes de error de los procesos.
 
\end_layout

\begin_layout Itemize
sys/sysinfo.h: esta biblioteca devuelve estadísticas respecto al uso de la
 memoria y el uso de swap también como la carga promedio de la memoria y
 otros datos.
 Mediante el metodo int sysinfo(struct sysinfo *info) que almacenara todos
 los datos en la estructura ingresada como parametro.
\end_layout

\begin_layout Itemize
sys/statvfs.h: para calcular el uso de los archivos del sistema se utilizó
 esta biblioteca que brinda datos sobre los archivos del sistema que permiten
 el cálculo del uso actual de las carpetas del sistema.
 Mediante el metodo statvfs(path, &vfs) donde los datos de la carpeta indicada
 en el path seran guardados en el parametro vfs.
 
\end_layout

\begin_layout Standard
Por otro lado código del archivo readFile.c tiene como función leer el archivo
 de configuración config.conf que se encuentra ubicado en /etc/trackermon/config.c
onf, este archivo contiene la especificación de lo que se debe monitorear
 y los threshold de cada parámetro a monitorear.
 En readFile.c se hace uso de una estructura de datos denominada configFile,
 esta estructura consta de:
\end_layout

\begin_layout Itemize
configFile.CPUthresholdResult: este dato es un int, contiene el threshold
 especificado del CPU.
\end_layout

\begin_layout Itemize
configFile.MemthresholdResult: este dato es un int, contiene el threshold
 especificado de la memoria RAM.
\end_layout

\begin_layout Itemize
configFile.LogFileResult: este dato es un arreglo de char, contiene la dirección
 en la que se debe escribir el archivo .log.
\end_layout

\begin_layout Itemize
configFile.FileSystemDataResult: este dato es un arreglo bidimensional de
 char, contiene los nombres de los system file a monitorear.
\end_layout

\begin_layout Itemize
configFile.FileSystemValueResult: este dato es un arreglo de int, contiene
 los threshold de los system file.
\end_layout

\begin_layout Itemize
configFile.index: este dato es un int, representa la cantidad de system file
 especificados en el archivo de configuración.
\end_layout

\begin_layout Standard
Las funciones de readFile.c se especifican a continuación:
\end_layout

\begin_layout Itemize
findSubstr: esta función recibe un arreglo de char y verifica si este se
 encuentra en otro arreglo de char, en caso de ser afirmativo retorna la
 posición en la que se encuentra, en otro caso retorna -1.
\end_layout

\begin_layout Itemize
getConfigFileInfo: esta función lee el archivo de configuración, extrae
 los datos y los encapsula en una estructura del tipo configFile, esta estructur
a es retornada.
\end_layout

\begin_layout Standard
El servicio es el encargado de ejecutar el demonio automáticamente.
 El servicio se encuentra ubicado en /etc/systemd/system/Trackermon.service.
 Para que el servicio inicie en el run level 5, se especifica en el servicio
 que este debe ejecutarse después de 
\begin_inset Quotes eld
\end_inset

graphical.target
\begin_inset Quotes erd
\end_inset

.
 Además en el se especifica que debe ejecutar ExecStart=/usr/bin/TrackerMon.
\end_layout

\begin_layout Standard

\series bold
\size larger
\color black
Diagrama UML
\end_layout

\begin_layout Standard
Figura 1.
 Diagrama UML del proyecto.
\end_layout

\begin_layout Standard

\series bold
\size larger
\color black
Intrucciones de como usar el programa
\end_layout

\begin_layout Standard
Para utilizar el programa Trackermon debe escribir los siguientes comandos
 en la terminal de Linux, se recomienda tener privilegios de usuario administrad
or, en otro caso sólo podra saber el estado de Trackermon.
 
\end_layout

\begin_layout Itemize
sudo service Trackermon start - este comando se utiliza iniciar el servicio
 Trackermon.
\end_layout

\begin_layout Itemize
sudo service Trackermon stop - este comando se utiliza detener el servicio
 Trackermon.
\end_layout

\begin_layout Itemize
sudo service Trackermon restart - este comando se utiliza reiniciar el servicio
 Trackermon.
\end_layout

\begin_layout Itemize
service Trackermon status - este comando se utiliza para saber el estado
 del servicio Trackermon.
\end_layout

\begin_layout Standard
Recuerde que en todo momento puede revisar el archivo Trackermon.log donde
 se encuentran todos los reportes del sistema Trackermon, para hacer esto
 escriba en la terminal /var/log/trackermon.log, además puede modificar el
 archivo config.conf para modificar los valores de los threshold y agregar
 system files a monitorear, para realizar esta acción escriba en la terminal
 sudo gedit /etc/trackermon/config.conf.
\end_layout

\begin_layout Standard

\series bold
\size larger
\color black
Estado final del proyecto
\end_layout

\begin_layout Standard
El proyecto se ha finalizado de forma satisfactoria cumpliendo con todos
 los requerimientos del cliente.
\end_layout

\begin_layout Standard
El mayor problema que se presentó fue el de la unión del servicio con el
 demonio, esto porque la distribución de linux que se utilizó es systemd
 y se intentaba hacer que el sevicio se ejecutara como sys-v, corregido
 este problema la creación del servicio se realizó sin contratiempos.
\end_layout

\begin_layout Standard

\series bold
\size larger
\color black
Conclusiones
\end_layout

\begin_layout Standard

\series bold
\size larger
\color black
Recomendaciones
\end_layout

\begin_layout Standard

\series bold
\size larger
\color black
Referencias
\end_layout

\begin_layout Standard
[1] http://cjh.polyplex.org/software/daemon.pdf
\end_layout

\begin_layout Standard
[2]http://www.linfo.org/daemon.html 
\end_layout

\begin_layout Standard
[3]http://web.archive.org/web/20120914180018/http://www.steve.org.uk/Reference/Unix/f
aq_2.html#SEC16 
\end_layout

\begin_layout Standard
[4]Verma, Archna (2006), Unix and Shell Programming
\end_layout

\end_body
\end_document
