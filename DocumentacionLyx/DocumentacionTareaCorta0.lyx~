#LyX 2.2 created this file. For more info see http://www.lyx.org/
\lyxformat 508
\begin_document
\begin_header
\save_transient_properties true
\origin unavailable
\textclass article
\use_default_options true
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman "default" "default"
\font_sans "default" "default"
\font_typewriter "default" "default"
\font_math "auto" "auto"
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100 100
\font_tt_scale 100 100
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\use_hyperref false
\papersize default
\use_geometry false
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Section
System V
\end_layout

\begin_layout Standard
System V fue una de las versiones del sistema operativo Unix.
 System V es la fuente de varias características comunes de Unix, tales
 como los "SysV init scripts", ubicados en /etc/init.d; usados para el control
 de inicio y apagado del sistema.
 El sistema de inicio System V controla el arranque de los programas en
 el instante de inicio de la máquina.
 Este sistema de inicio es considerado por muchos más fácil de usar, más
 potente y flexible que el sistema de inicio BSD tradicional.
 El proceso Init es un programa que el núcleo ejecuta cuando arranca el
 sistema.
 Se encarga de inicializar todos los procesos normales que se necesiten
 ejecutar en el momento de arrancar; incluyendo los terminales que le permiten
 acceder al sistema y cualquier proceso que quiera ejecutar cuando su máquina
 arranque.
 
\end_layout

\begin_layout Subsection
¿Cómo funciona los métodos de System V?
\end_layout

\begin_layout Standard
Con System V, la mayoría de las aplicaciones estándar que se pueden instalar
 se iniciarán al iniciar el sistema por defecto, Cada una de estas aplicaciones
 tiene sus propios scripts de inicio en /etc/init.d.
 Para aplicaciones personalizadas, el usuario tiene que crear sus propios
 scripts de inicio y habilitar los servicios para que se inicie automáticamente.
 System V utiliza Bash para los scripts de inicio.
 Para que un demonio se inicie o se detenga automáticamente cuando iniciamos
 y apagamos el sistema respectivamente debemos asignar los runlevels.
 El arranque de un sistema operativo UNIX tipo System V se puede dividir
 en dos etapas principales: el arranque del núcleo del sistema operativo
 y la inicialización que lleva acabo el programa "init".
 Un nivel de ejecución representa el estado actual de un sistema Linux.
 Cada nivel de ejecución indica qué servicios pueden estar en ejecución
 en ese estado.
 Algunos servicios pueden ejecutarse en uno o más niveles de ejecución,
 pero no en otros niveles.
 Los niveles de ejecución se denotan por un solo dígito y pueden tener un
 valor entre 0 y 6.
 La siguiente lista muestra lo que cada uno de estos niveles decir: 
\end_layout

\begin_layout Itemize
Nivel de ejecución 0: Apagado del sistema.
\end_layout

\begin_layout Itemize
Nivel de ejecución 1: Único usuario, modo de rescate.
\end_layout

\begin_layout Itemize
Nivel de ejecución 2: Multi-usuario, modo de texto con funciones de red
 habilitadas.
\end_layout

\begin_layout Itemize
Nivel de ejecución 3: Multi-usuario, modo de texto con funciones de red
 habilitadas.
\end_layout

\begin_layout Itemize
Nivel de ejecución 4: Multi-usuario, modo de texto con funciones de red
 habilitadas.
\end_layout

\begin_layout Itemize
Nivel de ejecución 5: Multi-usuario, red habilitada, en modo gráfico.
\end_layout

\begin_layout Itemize
Nivel de ejecución 6: Reinicio del sistema.
\end_layout

\begin_layout Standard
Los niveles de ejecución 2,3 y 4 varían dependiendo de la distribución.
 En System V, el sistema operativo se iniciará con un nivel de ejecución
 en particular; y, cuando se inicia, se tratará de iniciar todos los servicios
 que están asociados con ese nivel de ejecución.
 La secuencia de arranque de System V es:
\end_layout

\begin_layout Itemize
El demonio init se crea a partir del archivo binario /sbin/init.
\end_layout

\begin_layout Itemize
El primer archivo que el demonio init lee es /etc/inittab.
\end_layout

\begin_layout Itemize
Una de las entradas de este archivo decide el nivel de ejecución en el cual
 la máquina debe arrancar.
\end_layout

\begin_layout Itemize
Luego el demonio init sigue leyendo en el archivo /etc/inittab y lee lo
 que el script init necesita para funcionar en ese nivel de ejecución.
\end_layout

\begin_layout Standard
Así, cuando el demonio init encuentra los init scripts que se necesitan
 para funcionar en el nivel dado, es esencial averiguar cuáles son los servicios
 que necesita poner en marcha.
 Estos son los scripts de inicio donde se puede configurar el comportamiento
 de inicio para los servicios personalizados.
\end_layout

\begin_layout Subsection
¿Cómo son implementados los métodos?
\end_layout

\begin_layout Standard
Un script de inicio es lo que controla un servicio específico, como Trackermon,
 en System V.
 Los scripts de inicio para los servicios son proporcionados por el proveedor
 de la aplicación o vienen con la distribución de Linux.
 También podemos crear nuestros propios scripts de inicio para los servicios
 personalizados, en este caso para el servicio Trackermon.
 Cuando un proceso o servicio como Trackermon se inicia, su archivo de programa
 binario tiene que cargarse en la memoria.
 Dependiendo de cómo esté configurado el servicio, este programa puede tener
 que seguir ejecutandose en segundo plano de forma continua.
 La tarea de iniciar, detener o volver a cargar esta aplicación binaria
 está a cargo de los scripts de inicio del servicio.
 Se llama el script de inicio, ya que inicia el servicio.
 El directorio /etc es el directorio padre para los scripts de inicio.
 La ubicación real de los scripts de inicio está dentro de /etc/init.d.
 Estos scripts son un enlace simbólico a los directorios rc.
 Dentro del directorio /etc, hay una serie de directorios rc, cada uno con
 un número en su nombre.
 Los números representan diferentes niveles de ejecución.
 Así que para implementar un servicio en System V, se debe crear un script
 que contenga los métodos: start, stop, restart y status.
 Éste script se debe colocar en la carpeta /etc/init.d, de esta forma se
 podrá configurar como un servicio de Linux.
\end_layout

\begin_layout Section
Systemd
\end_layout

\begin_layout Standard
Systemd es un marco completamente nuevo que abarca muchos componentes de
 un sistema Linux moderno.
 Una de sus funciones es la de trabajar como un sistema y gestor de servicios
 para Linux.
 En esta función, uno de las cosas que Systemd controla es como un servicio
 debe comportarse si se bloquea o se reinicia el equipo.
 Systemd es compatible con los comandos de System V y sus scripts de inicializac
ión.
 Eso significa que cualquier servicio de System V también se ejecutará en
 systemd.
 
\end_layout

\begin_layout Subsection
¿Cómo funciona los métodos de Systemd?
\end_layout

\begin_layout Standard
En systemd los servicios se denominan units.
 Cada unit se define en un archivo donde se especifica un proceso para arrancar
 por systemd.
 La principal diferencia entre systemd y system v, es que systemd es responsable
 de la inicialización, no sólo de los demonios de servicios, sino también
 de otros tipos de recursos como las rutas del sistema operativo del dispositivo
, puntos de montaje, enchufes, etc.
 Un recurso puede ser cualquiera de estos.
 Los archivos que definen los units se pueden encontrar básicamente en tres
 ubicaciones distintas:
\end_layout

\begin_layout Itemize
/usr/lib/systemd/system/: unidades distribuidas con paquetes RPM instalados.
\end_layout

\begin_layout Itemize
/run/systemd/system/: unidades creadas en tiempo de ejecución.
 
\end_layout

\begin_layout Itemize
/etc/systemd/system/: unidades creadas y administradas por el administrador
 del sistema.
 
\end_layout

\begin_layout Standard
El formato de un archivo unit sigue un conjunto de reglas específicas.
 El archivo se divide en las siguientes secciones:
\end_layout

\begin_layout Itemize
Unit 
\end_layout

\begin_layout Itemize
Service 
\end_layout

\begin_layout Itemize
Install
\end_layout

\begin_layout Standard
Dentro de cada una de estas secciones se pueden especificar los siguientes
 parámetros.
\end_layout

\begin_layout Subsubsection
Sección Unit
\end_layout

\begin_layout Itemize
Description=Se indica una descripción del servicio que se muestra al consultar
 el status del servicio.
\end_layout

\begin_layout Itemize
After= Se indica el orden en el cual los units se inician.
 El unit se inicia sólo después de que los units especificados en esta línea
 estén activos.
 
\end_layout

\begin_layout Itemize
Requires= Aquí se indica la dependencias sobre otros units.
 Los units listados aquí serán activados junto con este unit.
 Si alguno de los units requeridos falla en el arranque, este unit tampoco
 se activa.
\end_layout

\begin_layout Itemize
Wants= Activa los units indicados aquí.
 Wants configura dependencias de manera más débil que Require.
 Si alguno de los units indicados por Wants no se inician correctamente
 no tienen ningún efecto en el estado de este unit.
 Wants es la manera recomendada para establecer dependencias personalizadas.
\end_layout

\begin_layout Itemize
Conflicts= Configura dependencias negativas, es decir, es un opuesto a Requires.
 El servicio no se inicia si el servicio indicado en esta línea está activo.
\end_layout

\begin_layout Subsubsection
Sección Service
\end_layout

\begin_layout Itemize
TimeoutStartSec= Tiempo tras el cuál, si el servicio no ha arrancado, se
 considera fallo y se detiene.
\end_layout

\begin_layout Itemize
ExecStart=comando a ejecutar.
\end_layout

\begin_layout Itemize
Type=Configura el tipo de arranque del procesos de la unidad la cual afecta
 a la funcionalidad ExecStart.
 Las opciones son:
\end_layout

\begin_deeper
\begin_layout Itemize
simple: El proceso arrancado con ExecStart es el proceso principal del servicio.
 Este proceso se arranca inmediatamente.
 No utilizar este tipo si otros servicios necesitan ejecutarse en orden
 con él.
 
\end_layout

\begin_layout Itemize
forking: El proceso iniciado con ExecStart genera un proceso hijo que se
 convierte en el proceso principal del servicio.
 Se sale del proceso padre cuando el arranque se completa.
 El uso de esta opción es importante cuando ejecutamos un script que a su
 vez ejecuta otros procesos.
 
\end_layout

\end_deeper
\begin_layout Subsubsection
Sección Install
\end_layout

\begin_layout Itemize
WantedBy=multi-user.target Indica el target al que pertenece este unit.
 Lo que se consigue con esto es que el servicio se ejecute automáticamente
 al arrancar el target especificado.
\end_layout

\end_body
\end_document
